# Default values for ah.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  storageClass:
  accessMode: ReadWriteOnce
replicaCount: 1
# -- Update policy
updateStrategy: "RollingUpdate"
image:
  repository: automatischio/automatisch
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  # renovate: datasource=docker depName=automatischio/automatisch
  tag: "0.12.0"

postgresql:
  enabled: true
  # see https://artifacthub.io/packages/helm/bitnami/postgresql?modal=values
  auth:
    database: automatisch
    username: automatischUser
    password:
    postgresPassword:
  primary:
    persistence:
      existingClaim: automatisch-postgresql-0
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi
  metrics:
    enabled: false
    resources:
      requests:
        cpu: 50m
        memory: 32Mi
        ephemeral-storage: 150Mi
      limits:
        cpu: 100m
        memory: 64Mi
        ephemeral-storage: 200Mi
redis:
  enabled: true
  # renovate: datasource=docker depName=redis
  version: "7.2.2"
  # @ignore, Configure resource limits
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
# @ignore, Configure pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 3000
  fsGroup: 2000
# @ignore, Configure security context
securityContext:
  runAsUser: 1000
  runAsNonRoot: true
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  # Hardening
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: "RuntimeDefault"

ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hostname: ""
  tls: []

app:
  config:
    # -- Automatisch Environment
    APP_ENV: production
    # -- Can be used to configure log level such as error, warn, info, http, debug
    LOG_LEVEL: info
    # -- HTTP Protocol
    PROTOCOL: http
  credentials:
    # -- Encryption Key to store credentials
    ENCRYPTION_KEY:
    # -- Webhook Secret Key to verify webhook requests
    WEBHOOK_SECRET_KEY:
    # -- Secret Key to authenticate the user
    APP_SECRET_KEY:
# @ignore, Configure resource limits
resources:
  limits:
    cpu: 200m
    memory: 256Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

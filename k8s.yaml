---
# Source: automatisch/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-automatisch
  labels:
    helm.sh/chart: automatisch-0.2.0
    app.kubernetes.io/name: automatisch
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.9.3"
    app.kubernetes.io/managed-by: Helm
---
# Source: automatisch/templates/secret-app.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-automatisch
  labels:
    helm.sh/chart: automatisch-0.2.0
    app.kubernetes.io/name: automatisch
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.9.3"
    app.kubernetes.io/managed-by: Helm
stringData:
  appSecretKey: 4
  encryptionKey: 1
  webhookSecretKey: 2
  dbName: "automatisch"
  dbUser: "automatischUser"
  dbPassword: ""
---
# Source: automatisch/templates/pvc-postgres.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: release-name-automatisch-postgres
  labels:
    helm.sh/chart: automatisch-0.2.0
    app.kubernetes.io/name: automatisch
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.9.3"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# Source: automatisch/templates/pvc-redis.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: release-name-automatisch-redis
  labels:
    helm.sh/chart: automatisch-0.2.0
    app.kubernetes.io/name: automatisch
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.9.3"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: automatisch/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: release-name-automatisch
  labels:
    helm.sh/chart: automatisch-0.2.0
    app.kubernetes.io/name: automatisch
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.9.3"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# Source: automatisch/templates/service-app.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-automatisch
  labels:
    helm.sh/chart: automatisch-0.2.0
    app.kubernetes.io/name: automatisch
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.9.3"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: ah-tcp
      protocol: TCP
      name: app
  selector:
    app.kubernetes.io/name: automatisch
    app.kubernetes.io/instance: release-name
---
# Source: automatisch/templates/service-postgres.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-automatisch-postgres
  labels:
    helm.sh/chart: automatisch-0.2.0
    app.kubernetes.io/name: automatisch-redis
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.9.3"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: postgres-tcp
      protocol: TCP
      name: postgres
  selector:
    app.kubernetes.io/name: automatisch-redis
    app.kubernetes.io/instance: release-name
---
# Source: automatisch/templates/service-redis.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-automatisch-redis
  labels:
    helm.sh/chart: automatisch-0.2.0
    app.kubernetes.io/name: automatisch-redis
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.9.3"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: redis-tcp
      protocol: TCP
      name: redis
  selector:
    app.kubernetes.io/name: automatisch-redis
    app.kubernetes.io/instance: release-name
---
# Source: automatisch/templates/deployment-app.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-automatisch
  labels:
    helm.sh/chart: automatisch-0.2.0
    app.kubernetes.io/name: automatisch
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.9.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: automatisch
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: automatisch
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-automatisch
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: main
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          image: "automatischio/automatisch:0.9.3"
          imagePullPolicy: IfNotPresent
          env:
            - name: PORT=3000
            - name: HOST=localhost
            
            
            - name: "APP_ENV"
              value: "production"
            - name: "LOG_LEVEL"
              value: "info"
            - name: "PROTOCOL"
              value: "http"
            - name: APP_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: "release-name-automatisch"
                  key: "$v"
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: "release-name-automatisch"
                  key: "$v"
            - name: WEBHOOK_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: "release-name-automatisch"
                  key: "$v"
            - name: REDIS_HOST
              value: "release-name-automatisch-redis"
            - name: POSTGRES_HOST
              value: "release-name-automatisch-postgres"
            - name: POSTGRES_DATABASE
              valueFrom:
                secretKeyRef:
                  name: "release-name-automatisch"
                  key: dbName
            - name: POSTGRES_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "release-name-automatisch"
                  key: dbUser
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "release-name-automatisch"
                  key: dbPassword
          ports:
            - name: ah-tcp
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 15
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - mountPath: "/automatisch/storage"
              name: storage
        - name: worker
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          image: "automatischio/automatisch:0.9.3"
          imagePullPolicy: IfNotPresent
          env:
            - name: WORKER
              value: true
            
            
            - name: "APP_ENV"
              value: "production"
            - name: "LOG_LEVEL"
              value: "info"
            - name: "PROTOCOL"
              value: "http"
            - name: APP_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: "release-name-automatisch"
                  key: "$v"
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: "release-name-automatisch"
                  key: "$v"
            - name: WEBHOOK_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: "release-name-automatisch"
                  key: "$v"
            - name: REDIS_HOST
              value: "release-name-automatisch-redis"
            - name: POSTGRES_HOST
              value: "release-name-automatisch-postgres"
            - name: POSTGRES_DATABASE
              valueFrom:
                secretKeyRef:
                  name: "release-name-automatisch"
                  key: dbName
            - name: POSTGRES_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "release-name-automatisch"
                  key: dbUser
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "release-name-automatisch"
                  key: dbPassword
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - mountPath: "/automatisch/storage"
              name: storage
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: release-name-automatisch
---
# Source: automatisch/templates/deployment-postgres.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-automatisch-postgres
  labels:
    helm.sh/chart: automatisch-0.2.0
    app.kubernetes.io/name: automatisch-redis
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.9.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: automatisch-redis
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: automatisch-redis
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-automatisch
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: automatisch
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          image: "postgres:14.5"
          imagePullPolicy: IfNotPresent
          env:
            - name: POSTGRES_DB
              value: automatisch
            - name: POSTGRES_USER
              value: automatischUser
            - name: POSTGRES_PASSWORD
              value: 
          ports:
            - name: postgres-tcp
              containerPort: 5432
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 15
          readinessProbe:
            exec:
              command:
                - CMD-SHELL
                - pg_isready
                - -U 
                - ${POSTGRES_USER} 
                - -d 
                - ${POSTGRES_DB}
            initialDelaySeconds: 5
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - mountPath: "/var/lib/postgresql/data"
              name: storage
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: release-name-automatisch-postgres
---
# Source: automatisch/templates/deployment-redis.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-automatisch-redis
  labels:
    helm.sh/chart: automatisch-0.2.0
    app.kubernetes.io/name: automatisch-redis
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.9.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: automatisch-redis
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: automatisch-redis
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-automatisch
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: automatisch
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          image: "redis:7.2.2"
          imagePullPolicy: IfNotPresent
          ports:
            - name: redis-tcp
              containerPort: 6379
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 15
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 5
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - mountPath: "/data"
              name: storage
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: release-name-automatisch-redis
